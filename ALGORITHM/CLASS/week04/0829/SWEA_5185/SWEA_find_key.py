# 주어진 array에서 코드 있는 줄 찾아내기!
def find_code (arr, n, m) :

    for i in range(n) :
        for j in range (m) :
            if arr[i][j] == 1 :     # 1 시작점 찾으면
                if arr[i][j + 56 -2] == 1 : # 코드가 0 1개로 시작하면(55번째 자리가 1이면),
                    need = arr[i][j-1 : j + 56 -1]
                    return need
                elif arr[i][j + 56 -3] == 1:    # 코드가 0 2개로 시작할 때
                    need = arr[i][j - 2: j + 56 -2]
                    return need
                else :                          # 코드가 0 3개로 시작할 때
                    need = arr[i][j - 3 : j + 56 - 3]
                    return need

    return []

# 암호 코드 변환 해주기
def real_code(lst) :
    result = [0] * 8

    for i in range(8) :     # 7개씩 노나서 맞는 값에 넣어주기
        if lst[7*i : 7 * (i + 1) ] == [0, 0, 0, 1, 1, 0, 1] :
            result[i] = 0
        elif lst[7*i : 7 * (i + 1) ] == [0, 0, 1, 1, 0, 0, 1] :
            result[i] = 1
        elif lst[7*i : 7 * (i + 1) ] == [0, 0, 1, 0, 0, 1, 1] :
            result[i] = 2
        elif lst[7*i : 7 * (i + 1) ] == [0, 1, 1, 1, 1, 0, 1] :
            result[i] = 3
        elif lst[7*i : 7 * (i + 1) ] == [0, 1, 0, 0, 0, 1, 1] :
            result[i] = 4
        elif lst[7*i : 7 * (i + 1) ] == [0, 1, 1, 0, 0, 0, 1] :
            result[i] = 5
        elif lst[7*i : 7 * (i + 1) ]== [0, 1, 0, 1, 1, 1, 1] :
            result[i] = 6
        elif lst[7*i : 7 * (i + 1) ] == [0, 1, 1, 1, 0 , 1, 1] :
            result[i] = 7
        elif lst[7*i : 7 * (i + 1) ] == [0, 1, 1, 0, 1, 1, 1] :
            result[i] = 8
        elif lst[7*i : 7 * (i + 1) ] == [0, 0, 0, 1, 0, 1, 1] :
            result[i] = 9

    return result

# 암호 찐인지 아닌지 확인하기
def final_code (code) :

    case = 0
    for i in range (8) :   # 코드 짝수 부분과 홀수 부분 더해주기
        if (i + 1) % 2 == 0 :
            case += code[i]
        else :
            case += 3*(code[i])

    if case % 10 == 0 :     # 10의 배수이면
        return sum(code)        # 합
    else :
        return 0                # 아니면 0

T = int(input())

for test_case in range (1, T + 1) :

    N, M = map(int,input().split())
    codes = [list(map(int,input())) for _ in range (N)]

    code_line = find_code(codes, N, M)

    result = final_code(real_code(code_line))
    print(f'#{test_case}', result)





'''
1
10 70
0000000000000000000000000000000000000000000000000000000000000000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000011101101100010111011011000101100010001101001001101110110000000000
0000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000
'''